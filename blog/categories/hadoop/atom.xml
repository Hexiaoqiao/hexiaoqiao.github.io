<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hadoop | Hexiaoqiao]]></title>
  <link href="http://hexiaoqiao.github.io/blog/categories/hadoop/atom.xml" rel="self"/>
  <link href="http://hexiaoqiao.github.io/"/>
  <updated>2021-02-28T15:42:35+08:00</updated>
  <id>http://hexiaoqiao.github.io/</id>
  <author>
    <name><![CDATA[Hexiaoqiao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache CarbonData初探]]></title>
    <link href="http://hexiaoqiao.github.io/blog/2016/10/01/carbondata-column-based-storage-format/"/>
    <updated>2016-10-01T10:45:00+08:00</updated>
    <id>http://hexiaoqiao.github.io/blog/2016/10/01/carbondata-column-based-storage-format</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/apache/incubator-carbondata">CarbonData</a>是由华为开源并支持<a href="http://hadoop.apache.org/">Hadoop</a>的列式存储文件格式，支持索引、压缩以及解编码等。其目的是为了实现同一份数据达到多种需求，而且能够实现更快的交互查询，目前该项目正处于Apache孵化阶段。本文在简单介绍CarbonData基础上，利用SSB基准测试工具对CarbonData与其他多种列式文件存储格式进行简单测试。部分内容来自<a href="http://weibo.com/207774111">@大月</a>同学。</p>

<h2>一、简介</h2>

<h3>1.1 背景</h3>

<p>针对数据的需求分析主要有以下5点要求： <br/>
（1）支持海量数据扫描提取其中某些列；<br/>
（2）支持根据主键进行查找的低于秒级响应；<br/>
（3）支持海量数据进行交互式查询的秒级响应； <br/>
（4）支持快速地抽取单独记录，并且从该记录中获取到所有列信息； <br/>
（5）支持HDFS，可以与Hadoop集群进行很好的无缝兼容。<br/>
现有的Hadoop生态系统中没有同时满足这五点要求文件格式。比如Parquet/ORC的文件能够满足第一和第五条要求，其他的要求无法满足，基于这些事实华为开发了CarbonData。</p>

<h3>1.2 优势</h3>

<p>CarbonData文件格式是基于列式存储的，并存储在HDFS之上；其包含了现有列式存储文件格式的许多优点，比如：可分割、可压缩、支持复杂数据类型等。</p>

<p>CarbonData为了解决前面提到的几点要求，加入了许多独特的特性，主要概括为以下四点：<br/>
（1）数据及索引：在有过滤的查询中，它可以显著地加速查询性能，减少I/O和CPU资源；CarbonData的索引由多级索引组成，计算引擎可以利用这些索引信息来减少调度和一些处理的开销；扫描数据的时候可以仅仅扫描更细粒度的单元（称为blocklet），而不再是扫描整个文件；<br/>
（2）可操作的编码数据：通过支持高效的压缩和全局编码模式，它可以直接在压缩或者编码的数据上查询，仅仅在需要返回结果的时候才进行转换，更好的查询下推；<br/>
（3）列组：支持列组，并且使用行格式进行存储，减少查询时行重建的开销；<br/>
（4）多种使用场景：顺序存取、随机访问、类OLAP交互式查询等。</p>

<h3>1.3 文件格式</h3>

<p>一个CarbonData文件是由一系列被称为blocklet组成的，除了blocklet，还有许多其他的元信息，比如模式、偏移量以及索引信息等，这些元信息是存储在CarbonData文件中的footer里。<br/>
当在内存中建立索引的时候都需要读取footer里面的信息，因为可以利用这些信息优化后续所有的查询。</p>

<p>每个blocklet又是由许多Data Chunks组成。Data Chunks里面的数据可以按列或者行的形式存储；数据既可以是单独的一列也可以是多列。文件中所有blocklets都包含相同数量和类型的Data Chunks。CarbonData文件格式如图1所示。</p>

<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/carbonformat.png" alt="CarbonData文件格式" align="center"><br />
<label class=“pic_title” align="center">图1 CarbonData文件格式</label>
</div>


<p></p>

<p>每个Data Chunk又是由许多被称为Pages的单元组成。总共有三种类型的pages：<br/>
（1）Data Page：包含一列或者列组的编码数据；<br/>
（2）Row ID Page：包含行id的映射，在Data Page以反向索引的形式存储时会被使用；<br/>
（3）RLE Page：包含一些额外的元信息，只有在Data Page使用RLE编码的时候会被使用。</p>

<h2>二、SSB介绍</h2>

<p>SSB全称Star Schema Benchmark，顾名思义，是一套用于测试数据库产品在星型模式下性能表现的基准测试规范，目前在学术界和工业界都得到了广泛的使用。提到数据仓库系统（更广义地说，决策支持系统）的基准测试规范，最权威的莫过于TPC-H和TPC-DS这两套规范，他们都由非营利组织TPC（事务处理性能理事会）发布。SSB实际上就是基于TPC-H修改而来的，将TPC-H的雪花模式简化为了星型模式，将基准查询由TPC-H的复杂Ad-Hoc查询改为了结构更固定的OLAP查询。</p>

<p>SSB的设定为零售业订单的产品、供应商分析场景，Schema包含一张事实表「订单lineorder」和四张维表：「消费者customer」, 「供应商supplier」, 「零件part」, 「日期date」，构成了一个典型的星型模式。图1中，表名下方的"SF * 30,000"代表各表的数据行数。例如，当SF=1时，事实表lineorder包含6,000,000行数据，维表customer包含30,000行数据，Date表的行数固定，不随SF变化。</p>

<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/ssb.png" alt="SSB Schema" align="center"><br />
<label class=“pic_title” align="center">图2 SSB Schema</label>
</div>


<p>SSB的基准查询专注于星型模式下的一类典型查询：读取事实表一次，连接各个维表，对某些维度属性做过滤，最后对某些维度属性分组聚集。在此基础上，SSB重点关注以下方面：<br/>
（1）提升「功能覆盖率」：基准查询集合应当尽可能地覆盖对星型模式的各种查询类型。SSB的基准查询分为四组，分别测试带2、3、4个维度属性过滤的情况，基本覆盖了多数场景；<br/>
（2）提升「选择度覆盖率」：某个查询最终需要读取的事实表行数（即事实表的选择度）由各个维度过滤条件的FF（过滤因子）决定。基准查询应当覆盖不同的选择度。SSB的基准查询的选择度大到1.9%，小到百万分之1，覆盖了很宽的范围；<br/>
（3）减小缓存的影响：如果相邻的两个基准查询扫描的事实数据有很大的重合，后者很有可能直接从缓存中读取数据，这会影响最终的测试结果。因此应当尽量避免基准查询读取重合的事实数据。</p>

<p>SSB的完整规范见<a href="http://www.cs.umb.edu/~poneil/StarSchemaB.PDF%E3%80%82">http://www.cs.umb.edu/~poneil/StarSchemaB.PDF%E3%80%82</a></p>

<p>简单说明：<br/>
SF（Scale Factor） ：生成测试数据集时传入的数据量规模因子，决定了各表最终生成的行数。<br/>
FF（Filter Factor）：每个where过滤条件筛选出一部分行，被筛选出的行数占过滤前行数的比例叫做FF。在过滤列彼此独立的条件下，表的FF为该表上各个过滤条件FF的乘积。</p>

<h2>三、安装使用</h2>

<p>SSB的安装是指测试数据集生成工具dbgen的安装，步骤如下：<br/>
（1）下载代码。官方提供的代码不支持在Mac上编译，这里我们使用Presto开发人员修改过的版本；<br/>
<figure class='code'><figcaption><span>ssb-dbgen </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$ git clone <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://github.com/electrum/ssb-dbgen&quot;</span><span class="nt">&gt;</span>https://github.com/electrum/ssb-dbgen<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>$ cd ssb-dbgen
</span></code></pre></td></tr></table></div></figure>
（2）如果在Mac上编译，直接运行make即可。如果在Linux上编译，需要修改makefile，将“MACHINE =MAC”改为“MACHINE =LINUX”；<br/>
（3）编译后的可执行程序为dbgen，它依赖一个数据分布文件dists.dss。dbgen默认将测试数据生成在当前目录，如果需要生成到其他目录，可以将dbgen和dists.dss拷贝到对应目录使用；<br/>
（4）使用dbgen生成测试数据。</p>

<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/ssbgen.png" align="center"><br />
<label class=“pic_title” align="center">图3 dbgen生成测试数据</label>
</div>


<p></p>

<h2>四、基准测试用例</h2>

<p>SSB提供了一套标准对各个数据仓库/OLAP系统进行性能测试和比较，其最大的特点：使用星型模式、基准查询代表性强、可以生成任意量级的测试数据。SSB的基准查询集分为4组，共13个查询。每组的查询结构类似，但「选择度」不同。这里列出每个查询的SQL和FF以及需要的事实表行数。
<figure class='code'><figcaption><span>ssbquery-set </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Q1.1
</span><span class='line'>select sum(lo_extendedprice<span class="nt">&lt;em&gt;</span>lo_discount) as revenue
</span><span class='line'>from lineorder, date
</span><span class='line'>where lo_orderdate = d_datekey
</span><span class='line'>and d_year = 1993
</span><span class='line'>and lo_discount between 1 and 3
</span><span class='line'>and lo_quantity <span class="ni">&amp;lt;</span> 25;
</span><span class='line'>FF = (1/7)<span class="nt">&lt;/em&gt;</span>0.5*(3/11) = 0.0194805<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = 0.0194805*6,000,000 ≈ 116,883<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q1.2
</span><span class='line'>select sum(lo_extendedprice<span class="nt">&lt;em&gt;</span>lo_discount) as revenue
</span><span class='line'>from lineorder, date
</span><span class='line'>where lo_orderdate = d_datekey
</span><span class='line'>and d_yearmonthnum = 199401
</span><span class='line'>and lo_discount between 4 and 6
</span><span class='line'>and lo_quantity between 26 and 35;
</span><span class='line'>FF = (1/84)<span class="nt">&lt;/em&gt;</span>(3/11)*0.2 = 0.00064935<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = 0.00064935*6,000,000 ≈ 3896<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q1.3
</span><span class='line'>select sum(lo_extendedprice<span class="nt">&lt;em&gt;</span>lo_discount) as revenue
</span><span class='line'>from lineorder, date
</span><span class='line'>where lo_orderdate = d_datekey
</span><span class='line'>and d_weeknuminyear = 6
</span><span class='line'>and d_year = 1994
</span><span class='line'>and lo_discount between 5 and 7
</span><span class='line'>and lo_quantity between 26 and 35;
</span><span class='line'>FF = (1/364)<span class="nt">&lt;/em&gt;</span>(3/11)*0.1 = 0.000075<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = 0.000075*6,000,000 ≈ 450<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q2.1
</span><span class='line'>select sum(lo_revenue), d_year, p_brand1
</span><span class='line'>from lineorder, date, part, supplier
</span><span class='line'>where lo_orderdate = d_datekey and lo_partkey = p_partkey and lo_suppkey = s_suppkey
</span><span class='line'>and p_category = <span class="ni">&amp;lsquo;</span>MFGR#12<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and s_region = <span class="ni">&amp;lsquo;</span>AMERICA<span class="ni">&amp;rsquo;</span>
</span><span class='line'>group by d_year, p_brand1
</span><span class='line'>order by d_year, p_brand1;
</span><span class='line'>pcategory = <span class="ni">&amp;lsquo;</span>MFGR#12<span class="ni">&amp;rsquo;</span>, FF = 1/25; sregion, FF=1/5.
</span><span class='line'>FF = (1/25)*(1/5) = 1/125<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (1/125)*6,000,000 ≈ 48,000<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q2.2
</span><span class='line'>select sum(lo_revenue), d_year, p_brand1
</span><span class='line'>from lineorder, date, part, supplier
</span><span class='line'>where lo_orderdate = d_datekey and lo_partkey = p_partkey and lo_suppkey = s_suppkey
</span><span class='line'>and p_brand1 between <span class="ni">&amp;lsquo;</span>MFGR#2221<span class="ni">&amp;rsquo;</span> and <span class="ni">&amp;lsquo;</span>MFGR#2228<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and s_region = <span class="ni">&amp;lsquo;</span>ASIA<span class="ni">&amp;rsquo;</span>
</span><span class='line'>group by d_year, p_brand1
</span><span class='line'>order by d_year, p_brand1;
</span><span class='line'>FF = (1/125)*(1/5) = 1/625<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (1/625)*6,000,000 ≈ 9600<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q2.3
</span><span class='line'>select sum(lo_revenue), d_year, p_brand1
</span><span class='line'>from lineorder, date, part, supplier
</span><span class='line'>where lo_orderdate = d_datekey and lo_partkey = p_partkey and lo_suppkey = s_suppkey
</span><span class='line'>and p_brand1 = <span class="ni">&amp;lsquo;</span>MFGR#2221<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and s_region = <span class="ni">&amp;lsquo;</span>EUROPE<span class="ni">&amp;rsquo;</span>
</span><span class='line'>group by d_year, p_brand1
</span><span class='line'>order by d_year, p_brand1;
</span><span class='line'>FF = (1/1000)*(1/5) = 1/5000<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (1/5000)*6,000,000 ≈ 1200<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q3.1
</span><span class='line'>select c_nation, s_nation, d_year, sum(lo_revenue) as revenue
</span><span class='line'>from lineorder, customer, supplier, date
</span><span class='line'>where lo_custkey = c_custkey and lo_suppkey = s_suppkey and lo_orderdate = d_datekey
</span><span class='line'>and c_region = <span class="ni">&amp;lsquo;</span>ASIA<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and s_region = <span class="ni">&amp;lsquo;</span>ASIA<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and d_year &gt;= 1992 and d_year <span class="ni">&amp;lt;</span>= 1997
</span><span class='line'>group by c_nation, s_nation, d_year
</span><span class='line'>order by d_year asc, revenue desc;
</span><span class='line'>FF = (1/5)<span class="nt">&lt;em&gt;</span>(1/5)<span class="nt">&lt;/em&gt;</span>(6/7) = 6/175<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (6/175)*6,000,000 ≈ 205,714<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q3.2
</span><span class='line'>select c_city, s_city, d_year, sum(lo_revenue) as revenue
</span><span class='line'>from lineorder, customer, supplier, date
</span><span class='line'>where lo_custkey = c_custkey and lo_suppkey = s_suppkey and lo_orderdate = d_datekey
</span><span class='line'>and c_nation = <span class="ni">&amp;lsquo;</span>UNITED STATES<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and s_nation = <span class="ni">&amp;lsquo;</span>UNITED STATES<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and d_year &gt;= 1992 and d_year <span class="ni">&amp;lt;</span>= 1997
</span><span class='line'>group by c_city, s_city, d_year
</span><span class='line'>order by d_year asc, revenue desc;
</span><span class='line'>FF = (1/25)<span class="nt">&lt;em&gt;</span>(1/25)<span class="nt">&lt;/em&gt;</span>(6/7) = 6/4375<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (6/4375)*6,000,000 ≈ 8,228<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q3.3
</span><span class='line'>select c_city, s_city, d_year, sum(lo_revenue) as revenue
</span><span class='line'>from lineorder, customer, supplier, date
</span><span class='line'>where lo_custkey = c_custkey and lo_suppkey = s_suppkey and lo_orderdate = d_datekey
</span><span class='line'>and (c_city=<span class="ni">&amp;lsquo;</span>UNITED KI1<span class="ni">&amp;rsquo;</span> or c_city=<span class="ni">&amp;lsquo;</span>UNITED KI5<span class="ni">&amp;rsquo;</span>)
</span><span class='line'>and (s_city=<span class="ni">&amp;lsquo;</span>UNITED KI1<span class="ni">&amp;rsquo;</span> or s_city=<span class="ni">&amp;lsquo;</span>UNITED KI5<span class="ni">&amp;rsquo;</span>)
</span><span class='line'>and d_year &gt;= 1992 and d_year <span class="ni">&amp;lt;</span>= 1997
</span><span class='line'>group by c_city, s_city, d_year
</span><span class='line'>order by d_year asc, revenue desc;
</span><span class='line'>FF = (1/125)<span class="nt">&lt;em&gt;</span>(1/125)<span class="nt">&lt;/em&gt;</span>(6/7) = 6/109375<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (6/109375)*6,000,000 ≈ 329<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q3.4 <span class="ni">&amp;ldquo;</span>needle-in-haystack<span class="ni">&amp;rdquo;</span>
</span><span class='line'>select c_city, s_city, d_year, sum(lo_revenue) as revenue
</span><span class='line'>from lineorder, customer, supplier, date
</span><span class='line'>where lo_custkey = c_custkey and lo_suppkey = s_suppkey and lo_orderdate = d_datekey
</span><span class='line'>and (c_city=<span class="ni">&amp;lsquo;</span>UNITED KI1<span class="ni">&amp;rsquo;</span> or c_city=<span class="ni">&amp;lsquo;</span>UNITED KI5<span class="ni">&amp;rsquo;</span>)
</span><span class='line'>and (s_city=<span class="ni">&amp;lsquo;</span>UNITED KI1<span class="ni">&amp;rsquo;</span> or s_city=<span class="ni">&amp;lsquo;</span>UNITED KI5<span class="ni">&amp;rsquo;</span>)
</span><span class='line'>and d_yearmonth = <span class="ni">&amp;lsquo;</span>Dec1997<span class="ni">&amp;rsquo;</span>
</span><span class='line'>group by c_city, s_city, d_year
</span><span class='line'>order by d_year asc, revenue desc;
</span><span class='line'>FF = (1/125)<span class="nt">&lt;em&gt;</span>(1/125)<span class="nt">&lt;/em&gt;</span>(1/84) = 1/1,312,500<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (1/1,312,500)*6,000,000 ≈ 5<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q4.1
</span><span class='line'>select d_year, c_nation, sum(lo_revenue - lo_supplycost) as profit
</span><span class='line'>from lineorder, date, customer, supplier, part
</span><span class='line'>where lo_custkey = c_custkey and lo_suppkey = s_suppkey and lo_partkey = p_partkey and lo_orderdate = d_datekey
</span><span class='line'>and c_region = <span class="ni">&amp;lsquo;</span>AMERICA<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and s_region = <span class="ni">&amp;lsquo;</span>AMERICA<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and (p_mfgr = <span class="ni">&amp;lsquo;</span>MFGR#1<span class="ni">&amp;rsquo;</span> or p_mfgr = <span class="ni">&amp;lsquo;</span>MFGR#2<span class="ni">&amp;rsquo;</span>)
</span><span class='line'>group by d_year, c_nation
</span><span class='line'>order by d_year, c_nation;
</span><span class='line'>FF = (1/5)(1/5)*(2/5) = 2/125<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (2/125)*6,000,000 ≈ 96000<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q4.2 <span class="ni">&amp;ldquo;</span>Drill Down to Category in 2 Specific Years<span class="ni">&amp;rdquo;</span>
</span><span class='line'>select d_year, s_nation, p_category, sum(lo_revenue - lo_supplycost) as profit
</span><span class='line'>from lineorder, date, customer, supplier, part
</span><span class='line'>where lo_custkey = c_custkey and lo_suppkey = s_suppkey and lo_partkey = p_partkey and lo_orderdate = d_datekey
</span><span class='line'>and c_region = <span class="ni">&amp;lsquo;</span>AMERICA<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and s_region = <span class="ni">&amp;lsquo;</span>AMERICA<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and (d_year = 1997 or d_year = 1998)
</span><span class='line'>and (p_mfgr = <span class="ni">&amp;lsquo;</span>MFGR#1<span class="ni">&amp;rsquo;</span> or p_mfgr = <span class="ni">&amp;lsquo;</span>MFGR#2<span class="ni">&amp;rsquo;</span>)
</span><span class='line'>group by d_year, s_nation, p_category
</span><span class='line'>order by d_year, s_nation, p_category;
</span><span class='line'>FF = (2/7)*(2/125) = 4/875<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (4/875)*6,000,000 ≈ 27,428<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Q4.3 <span class="ni">&amp;ldquo;</span>Further Drill Down to cities in US<span class="ni">&amp;rdquo;</span>
</span><span class='line'>select d_year, s_city, p_brand1, sum(lo_revenue - lo_supplycost) as profit
</span><span class='line'>from lineorder, date, customer, supplier, part
</span><span class='line'>where lo_custkey = c_custkey and lo_suppkey = s_suppkey and lo_partkey = p_partkey and lo_orderdate = d_datekey
</span><span class='line'>and c_region = <span class="ni">&amp;lsquo;</span>AMERICA<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and s_nation = <span class="ni">&amp;lsquo;</span>UNITED STATES<span class="ni">&amp;rsquo;</span>
</span><span class='line'>and (d_year = 1997 or d_year = 1998)
</span><span class='line'>and p_category = <span class="ni">&amp;lsquo;</span>MFGR#14<span class="ni">&amp;rsquo;</span>
</span><span class='line'>group by d_year, s_city, p_brand1
</span><span class='line'>order by d_year, s_city, p_brand1;
</span><span class='line'>FF = (1/5)<span class="nt">&lt;em&gt;</span>(1/25)<span class="nt">&lt;/em&gt;</span>(2/7)*(1/25) = 2/21875<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>of lineorder = (2/21875)*6,000,000 ≈ 549<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>五、测试过程</h2>

<h3>5.1 测试范围</h3>

<p>为了尽可能覆盖多种列式存储系统的性能表现，本次测试选择了ORC，Parquet和CarbonData。</p>

<h3>5.2 测试数据规模</h3>

<p>我们希望测到千万级、亿级和十亿级事实表的规模，因此分别选择了2、20、200的SF（Scale Factor），对应的各表行数如下：</p>

<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/datascale.png" align="center"><br />
<label class=“pic_title” align="center">图4 测试数据规模</label>
</div>


<p></p>

<h3>5.3 测试数据准备</h3>

<p>由于CarbonData的数据导入必须依赖csv文件，但是dbgen生成的是"|&ldquo;分割的文本数据，所以利用dbgen生成数据后需要先对测试数据进行一次预处理，将其转换成各系统均可识别的格式。最后，为避免测试过程中，数据缓存对测试结果的影响，为不同的存储系统和SF建立不同的测试表{table}_{format}_{scale}，如lineorder_orc_2。<br/>
综上考虑，以SF=2为例，数据准备分为三步：<br/>
（1）使用dbgen生成文本的测试数据；<br/>
（2）预处理生成的测试数据将其转换成csv格式；<br/>
（3）将csv格式的测试数据按照{table}_{format}_{scale}导入不同存储格式的表中；
最终在测试库下会生成包括文本存储格式数据在内共60张测试表{table}_{format}_{scale}；
测试数据在HDFS上副本因子统一为3；</p>

<h4>附：建表语句</h4>

<p><figure class='code'><figcaption><span>create ssb tables </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>USE ssb;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>DROP TABLE IF EXISTS <span class="nt">&lt;code&gt;</span>LINEORDER<span class="nt">&lt;/code&gt;</span>;
</span><span class='line'>CREATE TABLE <span class="nt">&lt;code&gt;</span>LINEORDER<span class="nt">&lt;/code&gt;</span> (
</span><span class='line'>  LO_ORDERKEY       bigint,
</span><span class='line'>  LO_LINENUMBER     int,
</span><span class='line'>  LO_CUSTKEY        bigint,
</span><span class='line'>  LO_PARTKEY        bigint,
</span><span class='line'>  LO_SUPPKEY        bigint,
</span><span class='line'>  LO_ORDERDATE      int,
</span><span class='line'>  LO_ORDERPRIOTITY  string,
</span><span class='line'>  LO_SHIPPRIOTITY   int,
</span><span class='line'>  LO_QUANTITY       int,
</span><span class='line'>  LO_EXTENDEDPRICE  int,
</span><span class='line'>  LO_ORDTOTALPRICE  int,
</span><span class='line'>  LO_DISCOUNT       int,
</span><span class='line'>  LO_REVENUE        int,
</span><span class='line'>  LO_SUPPLYCOST     int,
</span><span class='line'>  LO_TAX            int,
</span><span class='line'>  LO_COMMITDATE     int,
</span><span class='line'>  LO_SHIPMODE       string
</span><span class='line'>)
</span><span class='line'>STORED BY <span class="ni">&amp;lsquo;</span>carbondata<span class="ni">&amp;rsquo;</span>;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>DROP TABLE IF EXISTS <span class="nt">&lt;code&gt;</span>CUSTOMER<span class="nt">&lt;/code&gt;</span>;
</span><span class='line'>CREATE TABLE <span class="nt">&lt;code&gt;</span>CUSTOMER<span class="nt">&lt;/code&gt;</span> (
</span><span class='line'>  C_CUSTKEY     bigint,
</span><span class='line'>  C_NAME        string,
</span><span class='line'>  C_ADDRESS     string,
</span><span class='line'>  C_CITY        string,
</span><span class='line'>  C_NATION      string,
</span><span class='line'>  C_REGION      string,
</span><span class='line'>  C_PHONE       string,
</span><span class='line'>  C_MKTSEGMENT  string
</span><span class='line'>)
</span><span class='line'>STORED BY <span class="ni">&amp;lsquo;</span>carbondata<span class="ni">&amp;rsquo;</span>;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>DROP TABLE IF EXISTS <span class="nt">&lt;code&gt;</span>DATE<span class="nt">&lt;/code&gt;</span>;
</span><span class='line'>CREATE TABLE <span class="nt">&lt;code&gt;</span>DATE<span class="nt">&lt;/code&gt;</span> (
</span><span class='line'>  D_DATEKEY          int,
</span><span class='line'>  D_DATE             string,
</span><span class='line'>  D_DAYOFWEEK        string,
</span><span class='line'>  D_MONTH            string,
</span><span class='line'>  D_YEAR             int,
</span><span class='line'>  D_YEARMONTHNUM     int,
</span><span class='line'>  D_YEARMONTH        string,
</span><span class='line'>  D_DAYNUMINWEEK     int,
</span><span class='line'>  D_DAYNUMINMONTH    int,
</span><span class='line'>  D_DAYNUMINYEAR     int,
</span><span class='line'>  D_MONTHNUMINYEAR   int,
</span><span class='line'>  D_WEEKNUMINYEAR    int,
</span><span class='line'>  D_SELLINGSEASON    string,
</span><span class='line'>  D_LASTDAYINWEEKFL  int,
</span><span class='line'>  D_LASTDAYINMONTHFL int,
</span><span class='line'>  D_HOLIDAYFL        int,
</span><span class='line'>  D_WEEKDAYFL        int
</span><span class='line'>)
</span><span class='line'>STORED BY <span class="ni">&amp;lsquo;</span>carbondata<span class="ni">&amp;rsquo;</span>;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>DROP TABLE IF EXISTS <span class="nt">&lt;code&gt;</span>PART<span class="nt">&lt;/code&gt;</span>;
</span><span class='line'>CREATE TABLE <span class="nt">&lt;code&gt;</span>PART<span class="nt">&lt;/code&gt;</span>  (
</span><span class='line'>  P_PARTKEY     bigint,
</span><span class='line'>  P_NAME        string,
</span><span class='line'>  P_MFGR        string,
</span><span class='line'>  P_CATEGORY    string,
</span><span class='line'>  P_BRAND1      string,
</span><span class='line'>  P_COLOR       string,
</span><span class='line'>  P_TYPE        string,
</span><span class='line'>  P_SIZE        int,
</span><span class='line'>  P_CONTAINER   string
</span><span class='line'>)
</span><span class='line'>STORED BY <span class="ni">&amp;lsquo;</span>carbondata<span class="ni">&amp;rsquo;</span>;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>DROP TABLE IF EXISTS <span class="nt">&lt;code&gt;</span>SUPPLIER<span class="nt">&lt;/code&gt;</span>;
</span><span class='line'>CREATE TABLE <span class="nt">&lt;code&gt;</span>SUPPLIER<span class="nt">&lt;/code&gt;</span> (
</span><span class='line'>  S_SUPPKEY     bigint,
</span><span class='line'>  S_NAME        string,
</span><span class='line'>  S_ADDRESS     string,
</span><span class='line'>  S_CITY        string,
</span><span class='line'>  S_NATION      string,
</span><span class='line'>  S_REGION      string,
</span><span class='line'>  S_PHONE       string
</span><span class='line'>)
</span><span class='line'>STORED BY <span class="ni">&amp;lsquo;</span>carbondata<span class="ni">&amp;rsquo;</span>;
</span></code></pre></td></tr></table></div></figure></p>

<h3>5.4 测试方法</h3>

<p>使用13个基准查询对各系统进行测试，测试期间尽量避免队列资源存在竞争情况。每个基准查询跑三遍，结果取均值。<br/>
为减少不同计算引擎之间的差异，本次测试基于Spark 1.5.2进行，详细配置如下：<br/>
<figure class='code'><figcaption><span>spark-1.5.2 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$SPARK_HOME/bin/spark-submit <span class="ni">&amp;ndash;</span>master yarn-client <span class="ni">&amp;ndash;</span>queue root.hadoop-hdp.test <span class="ni">&amp;ndash;</span>executor-cores 4 <span class="ni">&amp;ndash;</span>executor-memory 8G <span class="ni">&amp;ndash;</span>num-executors 8 <span class="ni">&amp;ndash;</span>name <span class="ni">&amp;ldquo;</span>SSB Colume Test<span class="ni">&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure>
对于CarbonData选择相同的资源选项。<br/>
<figure class='code'><figcaption><span>carbondata-0.1.0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>$CARBON_HOME/bin/carbon-spark-sql <span class="ni">&amp;ndash;</span>master yarn-client <span class="ni">&amp;ndash;</span>queue root.hadoop-hdp.test <span class="ni">&amp;ndash;</span>executor-cores 4 <span class="ni">&amp;ndash;</span>executor-memory 8G <span class="ni">&amp;ndash;</span>num-executors 8 <span class="ni">&amp;ndash;</span>conf spark.carbon.storepath=hdfs:///user/hive/warehouse/ssb_compress.db <span class="ni">&amp;ndash;</span>name <span class="ni">&amp;ldquo;</span>SSB Column Test<span class="ni">&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure>
附Hadoop集群环境：<br/>
（1）JDK：1.7.0_76 HotSpot&trade; 64-Bit Server<br/>
（2）Hadoop：2.7.1<br/>
（3）Spark：1.5.2<br/>
（4）HDFS Replica Ratio：3</p>

<h3>5.5 测试结果</h3>

<h4>1、数据导入时间对比</h4>

<p>数据导入时间可参考：<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65869949">Apache CarbonData Performance Benchmark</a>，数据导入效率表现基本一致，orc与parquet无明显差别，这里不再详述。</p>

<h4>2、存储资源占用对比</h4>

<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/compressdata.png" align="center"><br />
<label class=“pic_title” align="center">图5 数据存储空间占用对比结果</label>
</div>




<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/compressratio.png" align="center"><br />
<label class=“pic_title” align="center">图6 数据压缩率对比图示</label>
</div>


<p></p>

<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/compress.png" align="center"><br />
<label class=“pic_title” align="center">图7 数据压缩率对比图示</label>
</div>


<p></p>

<p>从数据压缩率的测试结果可以看出：<br/>
（1）orc和parquet的数据压缩率与数据本身的关系并不大，基本可以控制在0.3以内，但是CarbonData对数据的压缩能力并不好，对于SSB的测试数据集，压缩率主要集中在0.4上下；<br/>
（2）需要关注的的是CarbonData中部分数据甚至超过的原始文本数据大小；</p>

<h4>3、查询效率对比</h4>

<p><em>注：下面关于查询效率的测试数据中包含了作业提交时间、JVM启动时间等，数据本身存在少许误差。</em></p>

<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/ssb2.png" align="center"><br />
<label class=“pic_title” align="center">图8 数据规模SF2下的查询结果对比</label>
</div>


<p></p>

<p>从SF=2数据规模下查询效率对比数据来看：<br/>
（1）多种存储系统的查询性能差别并不大；<br/>
（2） 整体来看，CarbonData稍微优于其他存储系统；<br/>
如果考虑到作业提交时间及JVM启动时间的误差，在SF2数据规模下的结果基本没有明显差异；</p>

<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/ssb20.png" align="center"><br />
<label class=“pic_title” align="center">图9 数据规模SF20下的查询结果对比</label>
</div>


<p></p>

<p><em>注：在SF=20数据规模下的测试结果看，结论与SF=2保持一致；</em></p>

<div class=“pic” align="center" padding=“0”>
<img src="http://hexiaoqiao.github.io/images/carbondata/ssb200.png" align="center"><br />
<label class=“pic_title” align="center">图10 数据规模SF200下的查询结果对比</label>
</div>


<p></p>

<p>在SF=200的数据规模查询效率对比数据来看：<br/>
（1）所有查询模式中，carbon明显优于其他存储系统；<br/>
（2）从整体上看，ORC/Parquet没有明显区别，基本可认为性能表现相似；<br/>
如果考虑到作业提交时间及JVM启动时间的误差，作业执行时间的差异表现差异非常明显，CarbonData具有非常好的优势；</p>

<h2>六、结论</h2>

<p>1、从查询性能上看，CarbonData具备非常好的优势，主要原因：<br/>
（1）MDK，Min-Max and Inverted Index等辅助信息可对结果数据进行更快速的查询，也能高效重建结果数据；<br/>
（2）列组（Column group）技术消除了行数据重建时隐式Join操作；<br/>
（3）使用全局字典编码加快计算速度，处理/查询引擎直接在编码数据上进行处理而不需要转换；<br/>
（4）延迟解码使得聚合操作更快，只有需要返回结果给用户时才进行解码转换。</p>

<p>2、由于CarbonData在加载数据时需要建立索引和全局字典编码，所以在数据加载和压缩率上比ORC和Parquet都要差，尤其在对一些特殊结构的数据表现较差，更适合一次写多次读且对存储资源使用不敏感的场景。<br/>
3、截止2016.10.01最新发布版本carbondata-0.1.0，在功能完备性、系统稳定性等方面还有提升空间，社区也在持续改进完善。<br/>
4、从整体上看，CarbonData优异的查询性能表现及社区的持续改进优化，未来非常值得期待。</p>

<h2>七、参考</h2>

<p>[1] <a href="https://github.com/apache/incubator-carbondata">https://github.com/apache/incubator-carbondata</a><br/>
[2] <a href="https://cwiki.apache.org/confluence/display/CARBONDATA/CarbonData+Home">https://cwiki.apache.org/confluence/display/CARBONDATA/CarbonData+Home</a><br/>
[3] <a href="https://www.iteblog.com/archives/1806">https://www.iteblog.com/archives/1806</a></p>
]]></content>
  </entry>
  
</feed>
